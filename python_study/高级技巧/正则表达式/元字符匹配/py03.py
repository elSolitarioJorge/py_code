# 元字符匹配
import re
# 单字符匹配：
# . 匹配任意字符（除换行符'\n'），可以用\.表示匹配点
# [] 匹配括号中的任意一个字符
# \d 匹配数字，等价于[0-9]
# \D 匹配非数字，等价于[^0-9]
# \s 匹配空白字符，即空白、Tab键，等价于[\t\n\r\f\v]
# \S 匹配非空白字符，等价于[^\t\n\r\f\v]
# \w 匹配单词字符，即a-z、A-Z、0-9、_，等价于[a-zA-Z0-9_]
# \W 匹配非单词字符，等价于[^a-zA-Z0-9_]
# \b 匹配单词边界，即单词和空格之间的位置
# \B 匹配非单词边界，即非单词和空格之间的位置

# 字符串前面带上r标记，表示字符串中的转义字符无效，就是普通字符的意思
# print(r"\t\a\n")    # \t\a\n

# 数量匹配：
# * 匹配前面的字符0次或多次，等价于{0,}
# + 匹配前面的字符1次或多次，等价于{1,}
# ? 匹配前面的字符0次或1次，等价于{0,1}
# {m} 匹配前面的字符m次
# {m,} 匹配前面的字符至少m次
# {m,n} 匹配前面的字符至少m次，最多n次

# 边界匹配：
# ^ 匹配字符串的开头
# $ 匹配字符串的结尾
# \b 匹配单词边界
# \B 匹配非单词边界

# 分组匹配：
# | 匹配左右任意一个表达式
# (ab) 匹配括号内的表达式，也表示一个组

# 简单案例：
# 匹配账号，只能由字母和数字组成，长度限制6到10位
# 规则为：^[0-9a-zA-Z]{6,10}$
# r = "^[0-9a-zA-Z]{6,10}$"
# s = "2869axs82b"
# print(re.findall(r, s))

# 匹配QQ号，要求纯数字，长度5-11，第一位不为0
# 规则为：^[1-9][0-9]{4,10}
# [1-9]匹配第一位，[0-9]匹配后面4到10位
# r = '^[1-9][0-9]{4,10}$'
# s = "2869828275"
# print(re.findall(r, s))

# 匹配邮箱地址，只允许qq、163、gmail邮箱
# 规则为：^[\w-]+(\.[\w-]+)*@qq|163|gmail)(\.[\w-]+)+$
# [\w-]+ 匹配邮箱名，\w匹配字母数字下划线，+表示匹配1次或多次，\w-匹配字母数字下划线减号
# r = r'^[\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$'
# s = "2869828275@qq.com"
# print(re.match(r, s))